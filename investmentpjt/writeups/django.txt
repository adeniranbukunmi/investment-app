HOW TO NAVIGATE PYTHON FOLDER WITH DJANGO
1>> create a folder in your local disk, name it according to the project name you are working with for easy accessibility (investment_folder)
2>> open anaconda prompt and install virtual environment if you have not done it before.(pip install virtualenv)
3>>navigate to the folder you created (cd\investment_folder) 
4>>create a virtual environment (virtualenv investmentenv) investmentenv is the name you give the environment you created
5>>enter the environment (cd inestmentenv)
6>> activate the environment (scripts\activate)
7>> move out of one env (cd..)
8>> install django (pip install django) make sure the env you created is before the base and your data should be on
9>> start a project (django-admin startproject  investmentproject)
10>>enter the project (cd investmentproject)
11>> start server (python manage.py runserver)
12>> open in browser (copy the address 127.0.0.1/8000 and paste) 

MAKE NECESSARY CHANGES ON DJANGO SETTINGS AND URLS IN THE PROJECT 
1>> you can choose to remove the first comment that comes with the setting or you leave it. it has no effect on the project
2>>import os cos you will need it
3>> include the base directory for django to know where it is 
PROJECT_DIRS = os.path.dirname(os.path.abspath(__file__)) this is once for all project and it is compulsory
4>>the secret key must remain private
5>> set debug to false before you push your work online else hackers will hack your website 
6>>ALLOWED HOSTS: here i can put any possible hosting address  that user can type as theY are searching for my website eg if they type without .com, if they type without a slash etc
7>> installed app: django automatically generate apps for us (we talk on this later)
8>>middleware : this section is for security and there is a csrf token that we can use to reduce the content on the address bar
9>>TEMPLATES : make sure you set the dir of templates with this (['%s/templates/' % (PROJECT_DIR),]) or ([os.path.join(base_dir, 'templates')]) or ([os.path.join(base_dir, 'templates')]) compulsory
10>> DATABASES: i wm using mysql and i have to set it this wayðŸ‘‡
            1. "default":{
                "ENGINE": "django.db.backends.mysql",
                "NAME": 'investmentproject_db',
                "USER": 'root',
                "PASSWORD": 'olasunkanmi60@',
                "HOST": '127.0.0.1',
                "PORT": '3306',
                "OPTIONS": {
                    'autocommit': True,
                    }
            }
                NOTE: you will need to go to mysql to create database for the project and what ever name you use as db must be in the NAME space above. 
11>> auth_password_validation : 
[
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    }, this first one  will not allow user to input a password that is the same as the username
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    }, this will check for the minimum length which is 8 character
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    }, this will check if the password is inside the dictionary, if it exist it wont all user to make use of it.(u can allow the user to use any thing for their password by removing this part)
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

12>> to use local server, the email will be sent to the command prompt using this code belowðŸ‘‡
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

13>> #to use email generated by server in which it will be sent to the user in their mail ðŸ‘‡

            # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
            # EMAIL_HOST ="smtp.gmail.com"
            # EMAIL_PORT =587
            # EMAIL_HOST_USER ="your email"
            # EMAIL_HOST_PASSWORD ="*********"
            # EMAIL_USE_TLS = True

13>> static_url : you have to specify the path of the static file 
            [os.path.join(BASE_DIR, 'static')]

THING TO DO IN THE PROJECTFOLDER BEFORe YOU START WORKING
            1 create a folder call templates (this is where all html file will be kept)
            2 create a static folder (this is where all css, js, images with be kept) 
            3 import os
            4 provide project_dir
            5 provide the path to your template
            6 set your data base 
            7 provide the path to your static

        THINGS TO NOTE WHEN WORKING WITH TEMPLATE 
1.dump the template folder inside your static file
2.extract the static files (js, css, images) into the static file
3. extract all the html files from the folder you dumped inside static and put them inside your template
4. go to settings and make necessary CHANGES
5. go to project urls and do mapping
            a.from django.views.generic import templateview (this is important)
            b.from django.urls import path (also important)
            urlpatterns=[
                        path("admin/", admin.site.urls), this is for the admin it comes with django

                        path('',TemplateView.as_view(template_name='index.html'),name='home'), this is the one for the home page and you will be the one to write it 

                        path('about/',TemplateView.as_view(template_name='about.html'),name='about'), this is the format to map any other html page that comes with the template

                        re_path(r'^accounts/',include('django.contrib.auth.urls')), this is use to map all the file created in the registration folder that is in template 

                        re_path(r'^accounts/signup/$',SignUpView.as_view(), name="signup"), to specify the path of signup that django has already built

                        re_path(r'^userapp/',include('investmentpjt.userapp.urls')),  this is how to specify the path of an app url  

                        ]

                WORKING WITH THE TEMPLATE ITSELF
1. your major work is in index page 
    load static {% load static %}
    introduce  {% block title  %} investment {% endblock %} into the html title tag. it not compulsory but nice  to do so
2.  on all the href that has the files in the static folder, must be preceded by
    {% static 'and end with' %} but do not put on any link having http because it coming from online.
3.  move all the code that is common to another page and name it common page or base and at the exact space where the uncommon start in the common page, put {% block content %} {% endblock %} this code will load the once that is in other pages.
4.  on other pages, at the beginning do extend {% extends 'common_page.html' %}, the title block, {% block content %} {% load static %} put all the uncommon code here and close it with {% endblock %} 

                    CREATING ADMIN SIDE IN A PROJECT
1.  127.0.0.1/8000/admin and it will take you to admin side and the you go to the anaconda prompt and do  python manage.py migrate (note:if the admin is not accessible, migrate first and then go to  127.0.0.1/8000/admin) this will ask for username and password then go back to create superuser at the prompt 
2.  create superuser  python manage.py createsuperuser. enter valid username, email address and password (note: the password wont show so you must be sure of what you are typing) 
3. enter the django admin site with the username and password
4. you can add to the users, make anyone staff or superuser and grant privileges to the staff but a superuser cant be tamed he/she can do anything on the website. the only way to curb this is to make everyone login from the frontend and restrict anyone from going to the django admin panel directly. so you will only give out the link of the things you want them to have access to out. 


    HOW TO  DO LOGIN, SIGN OUT, FORGET PASSWORD, CHANGE PASSWORD
django has already done all of this for us all we just need to do is to implement it
1. when you click on reset password, it will take you to a page called password_reset_confirm
        here you will enter your email and click on reset
2.your email will be sent to the server and you will get a link/password in your email provided. this page is called  password_reset_done
3. after pasting the link or password you got from the email, you will get a form where you will enter the old password and the new one then click on reset. the page is called password_reset_form
4. password_reset_complete page here a message will be sent to you that your work is done
            all this four(4) pages will be created in the folder called registration
            *login.html
            *password_reset_done.html
            *password_reset_form.html
            *password_reset_complete.html
            *password_reset_confirm.html
            *password_reset_done.html
    note: use investmentproject for how all the page is done.

SIGN UP PAGE
This is done as well but we will use bootstrap form
1. go inside the app for user and create a form.py file
